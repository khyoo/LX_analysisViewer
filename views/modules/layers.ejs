<script type="text/javascript">

  // labelStyle 지정
  var labelStyle = new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(255, 255, 255, 0.6)'
    }),
    stroke: new ol.style.Stroke({
      color: '#319FD3',
      width: 1
    }),
    text: new ol.style.Text({
      offsetY: -15,
      font: '12px Calibri,sans-serif',
      fill: new ol.style.Fill({
        color: '#000'
      }),
      stroke: new ol.style.Stroke({
        color: '#fff',
        width: 3
      })
    })
  });

  // Create layer
  var buildingSource = new ol.source.Vector({
    url: '/data/j_build.geojson',
    projection: 'EPSG:3857',
    format: new ol.format.GeoJSON()
  });

  var buildingVector = new ol.layer.Vector({
    title: '건물 Polygon',
    visible: true,
    source: buildingSource,
    /*
    style: new ol.style.Style({
    fill: new ol.style.Fill({ color: '#333' })
    }),
    */
    maxResolution: 7,
    zIndex: 1100
  });
  //map.addLayer(buildingVector);

  // Create layer
  var roadAllPOISource = new ol.source.Vector({
    url: 'http://info.rlog.kr:8880/rest/shp2Geojson/jeonju_road_poi_all',
    projection: 'EPSG:3857',
    format: new ol.format.GeoJSON()
  });

  var roadAllPOIVector = new ol.layer.Vector({
    title: '전체 도로 Point',
    visible: false,
    source: roadAllPOISource,
    style: new ol.style.Style({
      image: new ol.style.Circle({
        radius: 5,
        snapToPixel: false,
        stroke: new ol.style.Stroke({
          //color: "#6C757D",
          color: "#900",
          width: 2
        })
      })
    }),
    maxResolution: 25,
    zIndex: 1000
  });
  //map.addLayer(poiVector);

  roadAllPOISource.once('change', function (e) {
    if (roadAllPOISource.getState() === 'ready') {

    }
  });

  // Create layer
  var roadPOISource = new ol.source.Vector({
    url: '/data/poi.geojson',
    projection: 'EPSG:3857',
    format: new ol.format.GeoJSON()
  });

  var roadPOIVector = new ol.layer.Vector({
    title: '도로 점수 Point',
    visible: false,
    source: roadPOISource,
    style: new ol.style.Style({
      image: new ol.style.Circle({
        radius: 5,
        snapToPixel: false,
        stroke: new ol.style.Stroke({
          color: "#900",
          width: 2
        })
      })
    }),
    maxResolution: 25,
    zIndex: 1000
  });

  var roadPOILabelVector = new ol.layer.Vector({
    title: '도로 점수 Point_label',
    visible: false,
    source: roadPOISource,
    style: function (feature) {
      labelStyle.getText().setText(weightsFunc(feature.getProperties().qt_score, parseFloat(hmap_blur.value, 10)));
      return labelStyle;
    },
    //maxResolution: 25,
    zIndex: 1000
  });

  roadPOISource.on('featuresloadstart', function (e) {
    $('#div_load_image').show();
  });

  roadPOISource.on('featuresloadend', function (e) {
    $('#div_load_image').hide();
    if (roadPOISource.getState() === 'ready') {
      // TO-DO     
    }
  });

  // flowline vetor layer
  var flowlineSource = new ol.source.Vector({
    // url: '/data/flowline.geojson',
    url: '/data/jeonju_road_line_origin.geojson',
    // url: '/data/jeonju_road_line_origin.geojson',
    format: new ol.format.GeoJSON()
  });
  var flowlineVector = new ol.layer.VectorImage({
    title: '도로 점수',
    visible: false,
    source: flowlineSource,
    style: styleFn
  });
  //map.addLayer(flowlineVector);

  flowlineSource.on('featuresloadstart', function (e) {
    $('#div_load_image').show();
  });

  flowlineSource.on('featuresloadend', function (e) {
    $('#div_load_image').hide();
    if (flowlineSource.getState() === 'ready') {
      // TO-DO     
    }
  });

  flowlineSource.once('change', function (e) {
    if (flowlineSource.getState() === 'ready') {
      /**
      * author : khyoo1221
      * description : 
      * @param {feature}
      * @param {paramNm}
      * @param {px}
      * 
      */

      // setCoords_Z(flowlineSource.getFeatures()[0], 'params', flowlineSource.getFeatures()[0].getProperties().weights[0].w1);
      setCoords_Z2(flowlineSource.getFeatures(), 200);

      // Set Min/Max from feature
      getMinMax(flowlineSource.getFeatures());
    }
  });


  var flowline_radius = document.getElementById('flowline_radius');
  flowline_radius.addEventListener('input', function () {
    // console.log(parseInt(flowline_radius.value, 10));
    flowlineVector.setStyle(new ol.style.FlowLine({
      visible: false,
      lineCap: 'round',
      color: function (f, step) {
        var seg = [];
        var line = f.getGeometry().getLineString(0);
        line.getCoordinateAtSeg(step * line.getLength(), seg);
        var h = (seg[0][2] + seg[0][2]) / 2;
        var dh = 255 * (h - min) / (max - min);
        return getColor(dh, parseInt(flowline_radius.value, 10));
      },
      width: 10,
      geometry: function (f) {
        if (f.getGeometry().getType() === 'MultiLineString') {
          return f.getGeometry().getLineString(0);
        } else {
          return f.getGeometry();
        }
      }
    }));
  });


  // Set 3D renderer
  var r3D = new ol.render3D({
    /** /
    style: new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'blue',
        width: 2
      }),
      fill: new ol.style.Fill({ color: 'red' })
    }),
    /**/
    // ghost: true,
    height: 0,
    maxResolution: 10,
    defaultHeight: 3.5
  });
  buildingVector.setRender3D(r3D);


</script>